diff --git a/README.md b/README.md
index 365bc075cab597d3e0ca0d9412ad1a86dcab5a44..e20335a161e753a03379afc56e13ba00f7ec2250 100644
--- a/README.md
+++ b/README.md
@@ -1,38 +1,39 @@
 # Ядро генерации — Этап 1 (демо без UI)
 
 ## Что это
 Базовый модуль, который принимает параметры (тема, цель, ключевые слова, тон, структура, объём)
 и собирает системный промпт для модели.
 
 ## Файлы
 - `config.py` — дефолтные настройки.
 - `helpers.py` — утилиты форматирования.
 - `rules_engine.py` — сборка промпта (`build_prompt(data)`).
 - `base_prompt.txt` — шаблон промпта.
 - `input_example.json` — пример входных данных.
 - `run_demo.py` — проверка без UI.
+- `docs/implementation_overview.md` — техническая документация с обзором архитектуры и зависимостей.
 
 ## Быстрый старт
 ```bash
 python3 -m venv venv
 # macOS/Linux:
 source venv/bin/activate
 # Windows (PowerShell):
 # venv\Scripts\activate
 
 python run_demo.py
 
 ```
 
 ## RAG-ready (Stage 1)
 
 ### Profiles layout
 - `profiles/<theme>/exemplars/` — тематические фрагменты по 200–700 слов (одно ключевое сообщение на файл, нейтральный Markdown). Пример: `profiles/finance/exemplars/{001_intro.md, 002_benefits.md, 003_faq.md}`.
 - `profiles/<theme>/glossary.txt` — короткие термины и определения одной строкой.
 - `profiles/<theme>/style_guide.md` — тон, do/don't, политика заголовков и локализации.
 
 ### Оркестрация без LLM
 - `assemble_messages.py` — собирает системный промпт и добавляет `CONTEXT`, когда `retrieve_exemplars()` начнёт возвращать фрагменты.
 - `retrieve_exemplars(theme_slug, query, k=3)` — контракт Stage 2: должен отдавать список словарей вида `{ "path": str, "text": str, "score": float }`, подобранных под токен-бюджет (~500–700 токенов суммарно).
 - Итоговый формат сообщений: `[{"role": "system", ...}, опциональный CONTEXT, {"role": "user", "content": "Сгенерируй текст по указанным параметрам."}]`.
 

